from typing import Dict, Any
import logging

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)


def _round2(value: float) -> float:
    """–û–∫—Ä—É–≥–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π."""
    return round(value, 2)


def _format_memory_section(title: str, data: Dict[str, float]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é –ø–∞–º—è—Ç–∏ (RAM –∏–ª–∏ Swap) –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥."""
    logger.debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {title} —Å –¥–∞–Ω–Ω—ã–º–∏ {data}")
    return (
        f"<b>{title}:</b>\n"
        f"<b>- –û–±—â–∏–π –æ–±—ä—ë–º:</b> {_round2(data['total_gb'])} GB ({_round2(data['total_mb'])} MB)\n"
        f"<b>- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {_round2(data['used_gb'])} GB ({_round2(data['used_mb'])} MB)\n"
        f"<b>- –ó–∞–≥—Ä—É–∑–∫–∞:</b> {_round2(data['percent'])} %\n\n"
    )


def _format_disk(disk: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥."""
    logger.debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ: {disk}")
    return (
        f"<b>  - –î–∏—Å–∫:</b> {disk.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"<b>    –¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {disk.get('mount_point', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>    –î–æ—Å—Ç—É–ø–Ω–æ:</b> {_round2(disk.get('available_space_gb', 0))} GB "
        f"({_round2(disk.get('available_space_mb', 0))} MB)\n"
        f"<b>    –í—Å–µ–≥–æ:</b> {_round2(disk.get('total_space_gb', 0))} GB "
        f"({_round2(disk.get('total_space_mb', 0))} MB)\n"
    )


def _format_component(component: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥."""
    logger.debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ: {component}")
    return f"<b>  - {component.get('label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}:</b> {component.get('temperature', 'N/A')} ¬∞C\n"


def format_host_info(info: Any, short: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∏–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.

    Args:
        info: –û–±—ä–µ–∫—Ç —Ö–æ—Å—Ç–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º metric, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–µ, –ø–∞–º—è—Ç–∏, –¥–∏—Å–∫–∞—Ö –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö.
        short (bool, optional): –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–æ—Ä–æ—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é False.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö–æ—Å—Ç–µ (–ø–æ–ª–Ω–∞—è –∏–ª–∏ —É–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è).
    """
    logger.debug(f"–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ—Å—Ç–µ —Å IP {info.ip}:{info.port}, –∫–æ—Ä–æ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è: {short}")
    metric = info.metric
    text_parts = []

    if short:
        # –£–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: IP, –ø–æ—Ä—Ç, –∏–º—è —Ö–æ—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∫–∞ RAM, CPU, Swap –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        ram_percent = _round2(metric.ram_percent)
        swap_percent = _round2(metric.swap_percent)
        last_checked = metric.last_checked.strftime('%Y-%m-%d %H:%M:%S') if metric.last_checked else "–ù–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å"

        text_parts.append(
            f"<b>üñ• {info.ip}:{info.port}</b>\n"
            f"<b>- –ò–º—è:</b> {info.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>- RAM:</b> {ram_percent} %\n"
            f"<b>- Swap:</b> {swap_percent} %\n"
            f"<b>- –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:</b> {last_checked}\n"
        )
        logger.debug(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ—Å—Ç–µ: {''.join(text_parts)}")
    else:
        # –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
        text_parts.append(
            f"<b>üñ• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ—Å—Ç–µ {info.ip}:{info.port}:</b>\n"
            f"<b>- –ò–º—è:</b> {info.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>- –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è:</b> {metric.system_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>- –í–µ—Ä—Å–∏—è —è–¥—Ä–∞:</b> {metric.kernel_version or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>- –í–µ—Ä—Å–∏—è –û–°:</b> {metric.os_version or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>- –ò–º—è —Ö–æ—Å—Ç–∞:</b> {metric.host_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        )

        ram_info = {
            "total_gb": metric.total_ram_gb,
            "total_mb": metric.total_ram_mb,
            "used_gb": metric.used_ram_gb,
            "used_mb": metric.used_ram_mb,
            "percent": metric.ram_percent,
        }
        text_parts.append(_format_memory_section("üíæ –ü–∞–º—è—Ç—å", ram_info))

        swap_info = {
            "total_gb": metric.total_swap_gb,
            "total_mb": metric.total_swap_mb,
            "used_gb": metric.used_swap_gb,
            "used_mb": metric.used_swap_mb,
            "percent": metric.swap_percent,
        }
        text_parts.append(_format_memory_section("üîÑ –°–≤–æ–ø", swap_info))

        text_parts.append("<b>üíª –î–∏—Å–∫–∏:</b>\n")
        if metric.disks:
            for disk in metric.disks:
                text_parts.append(_format_disk(disk))
        else:
            text_parts.append("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏—Å–∫–∞—Ö.\n")

        text_parts.append("\n<b>üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:</b>\n")
        if metric.components:
            for component in metric.components:
                text_parts.append(_format_component(component))
        else:
            text_parts.append("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.\n")

        last_checked = metric.last_checked.strftime('%Y-%m-%d %H:%M:%S') if metric.last_checked else "–ù–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å"
        text_parts.append(f"\n<b>üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {last_checked}\n")

    logger.debug(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–æ—Å—Ç–µ: {''.join(text_parts)}")
    return "".join(text_parts)